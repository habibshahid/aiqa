// src/components/AIContextGenerator.js
import React, { useState } from 'react';
import { Sparkles, XCircle, Check } from 'lucide-react';

/**
 * Component for generating or improving context using AI
 * 
 * @param {string} paramName - The parameter name/label
 * @param {string} existingContext - Existing context if available
 * @param {string} scoringType - The scoring type (binary/variable)
 * @param {number} maxScore - Maximum score for the parameter
 * @param {string} classification - The classification (minor/moderate/major/none)
 * @param {function} onApply - Callback when the user applies the generated context
 */
const AIContextGenerator = ({ 
  paramName = '', 
  existingContext = '', 
  scoringType = 'variable',
  maxScore = 5,
  classification = 'none',
  onApply 
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [generatedContext, setGeneratedContext] = useState('');
  const [error, setError] = useState(null);

  // Function to generate context using AI
  const generateContext = async () => {
    try {
      setError(null);
      setIsGenerating(true);
      
      // Prepare data for API
      const requestData = {
        paramName,
        existingContext,
        scoringType,
        maxScore,
        classification
      };
      
      // Make API call to the backend
      const response = await fetch('/api/qa-forms/generate-context', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(requestData)
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate context');
      }
      
      const data = await response.json();
      
      // Set the generated context and show the modal
      setGeneratedContext(data.context);
      setIsModalOpen(true);
    } catch (err) {
      console.error('Error generating context:', err);
      setError(err.message || 'Failed to generate context');
    } finally {
      setIsGenerating(false);
    }
  };

  // Handle applying the generated context
  const handleApply = () => {
    if (onApply && generatedContext) {
      onApply(generatedContext);
    }
    
    // Close the modal
    setIsModalOpen(false);
    setGeneratedContext('');
  };

  // Handle closing the modal without applying
  const handleClose = () => {
    setIsModalOpen(false);
    setGeneratedContext('');
  };

  return (
    <>
      {/* Button to trigger context generation */}
      <button
        type="button"
        className="btn btn-sm btn-outline-primary d-flex align-items-center"
        onClick={generateContext}
        disabled={isGenerating}
        title={existingContext ? "Improve context with AI" : "Generate context with AI"}
      >
        <Sparkles size={16} className="me-1" />
        {isGenerating ? 'Generating...' : existingContext ? 'Improve with AI' : 'Generate Context'}
      </button>
      
      {/* Error message */}
      {error && (
        <div className="alert alert-danger mt-2 mb-0">
          <small>{error}</small>
        </div>
      )}
      
      {/* Modal to preview and apply the generated context */}
      {isModalOpen && (
        <div className="modal fade show" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">AI-Generated Context</h5>
                <button type="button" className="btn-close" onClick={handleClose}></button>
              </div>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">For: <strong>{paramName}</strong></label>
                  <div className="border rounded p-3 bg-light">
                    {generatedContext}
                  </div>
                </div>
                
                {existingContext && (
                  <div className="mt-3">
                    <h6>Original Context:</h6>
                    <div className="border rounded p-3 mb-3 bg-light text-muted">
                      {existingContext}
                    </div>
                  </div>
                )}
                
                <div className="alert alert-info">
                  <small>
                    This context was generated by AI based on the parameter name, scoring type, and other details.
                    Review it carefully before applying.
                  </small>
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-outline-secondary d-flex align-items-center" onClick={handleClose}>
                  <XCircle size={16} className="me-1" />
                  Cancel
                </button>
                <button type="button" className="btn btn-primary d-flex align-items-center" onClick={handleApply}>
                  <Check size={16} className="me-1" />
                  Apply Context
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default AIContextGenerator;